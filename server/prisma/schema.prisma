generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRESQL_URL")
  relationMode = "foreignKeys"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  workspaces Workspace[]
  members    Member[]
}

model Workspace {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String?
  inviteCode String?
  createdAt  DateTime @default(now())

  members  Member[]
  projects Project[]
  tasks    Task[]

  // Foreign Keys
  userId String

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Member {
  id        String   @id @default(uuid())
  role      Role
  createdAt DateTime @default(now())

  assignedTasks Task[]

  // Foreign Keys
  userId      String
  workspaceId String

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Project {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())

  tasks Task[]

  // Foreign Keys
  workspaceId String

  // Relationships
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String?
  status      TaskStatus @default(BACKLOG)
  priority    Priority   @default(MEDIUM)
  position    Int // For drag and drop reordering
  dueDate     DateTime
  sprint      String?
  storyPoints Int?
  createdAt   DateTime   @default(now())

  // Foreign keys
  projectId   String
  workspaceId String
  assigneeId  String

  // Relationships
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignee  Member    @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([sprint])
}

enum Role {
  ADMIN
  MEMBER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
